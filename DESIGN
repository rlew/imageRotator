Rachel Lew
Trevor John

OVERALL ARCHITECTURE
    We are designing an image compressor that takes a PPM and compresses it
    to a third the size through the use of bit packing and lossy 
    compression. We are using our UArray2 to create a pixmap that will then be
    used in the various stages of the compression such as converting from 
    scaled RGB integers to floats. We are using UArray2b to create a pixmap 
    that will map from luminance and chroma values to average chroma and cosine
    coefficient floats. We will then use UArray2 again to represent the pixmap
    in the conversion from average chroma values and cosine coefficients
    floats to scaled integers representations of these data types. These
    integers will then be packed into a 32-bit word representing a block of 4
    pixels in the original image, reducing the total information to a third of
    the original size.

    We are also designing an image decompressor that takes in the bit-packed
    representation of an image and reverses the sequence of compression
    operations indicated above to represent the original image as closely as
    possible (lossy compression).

    For all of the below programs:It is a checked run-time error if the array 
    passed into any function is NULL or the coordinates are out of bounds. 

    40image (40image.c)
    - int main(int argc, char* argv[])
        Handles input by reading in command (-c or -d) and file to be
        modified. Exits and prints to stderr when too many arguments are given
        and when unknown flags are specified.

    For compress / decompress apply functions, the closure holds the array of
    the new type / format that is being created. It is updated with the
    mapping of each pixel. The pixmap will be represented as an
    A2Methods_UArray2 with varying pixel structures.

    compress40 (compress40.c)
    - void compress40(FILE *input)
        Creates the PPM from the input file and uses below apply functions on
        different representations of pixmap (uarray2 or uarray2b) to compress
        the image to a third of the original size
    - void applyRGBToFloatScale(int col, int row, A2Methods_UArray2 array, 
        void* elem, void* cl)
        Transforms the RGB int structs to RGB float structs for a given pixel 
    - void applyRGBFloatToLuminanceAndChromaFloats(int col, int row, 
        A2Methods_UArray2 array, void* elem, void* cl)
        Transforms the RGB float struct to a luminance and average red / blue
        chroma values to represent the given pixel.
    - void applyLuminanceAndChromaFloatsToAvgAndDCT(int col, int row, 
        A2Methods_UArray2 array, void* elem, void* cl)
        Collects the block (2x2) to be averaged and transformed with the
        discrete cosine formula
    - void* averageAndDCTBlock(void* block);
        Returns the average blue and red chroma values and the cosine
        coeffients for the 4 elements in the block.
    - void applyAvgAndDCTFloatsToInts(int col, int row, 
        A2Methods_UArray2 array, void* elem, void* cl)
        Transforms the average red/blue chroma and cosine coefficient values
        from floats to signed and unsigned scaled integers. 
    - void applyBitPacking(int col, int row, 
        A2Methods_UArray2 array, void* elem, void* cl)
        Packs the cosine coefficients into 5-bit signed scaled integers to
        create 32-bit codewords to represent each 2x2 block
    
    decompress40 (compress40.c)
    - void decompress40(FILE *input)
        Takes a pointer to a compressed image and uses below apply functions
        on different representations of pixmap (uarray2 or uarray2b) to
        decompress the image to its original size.
    - void applyUnpackBits(int col, int row, 
        A2Methods_UArray2 array, void* elem, void* cl)
        Unpacks the cosine coefficients and chroma indexes for each 32-bit 
        codeword.
    - void applyAvgAndDCTIntsToFloats(int col, int row, 
        A2Methods_UArray2 array, void* elem, void* cl)
        Transforms the scaled integer average chroma values and cosine
        coefficients to floats
    - void applyAvgAndDCTToLuminanceAndChromaFloats(int col, int row, 
        A2Methods_UArray2 array, void* elem, void* cl)
        Inverse discrete cosine formula used to get the luminance of each
        pixel. Each pixel's red/blue chroma value gets the average of the 4 in
        the block.
    - void applyLuminanceAndChromaFloatsToRGBFloat(int col, int row, 
        A2Methods_UArray2 array, void* elem, void* cl)
        Transforms the luminance and chroma red/blue values into an RGB float
        struct for a given pixel.
    - void applyRGBToIntScale(int col, int row, A2Methods_UArray2 array, void*
        elem, void* cl)
        Transforms the RGB float structs to RGB int structs for a given pixel.

    Bitpack (bitpack.c)
    - bool Bitpack_fitsu(uint64_t n, unsigned width);
        Takes in unsigned integer and returns T/F indicating whether it will
        fit in the given width.
    - bool Bitpack_fitss( int64_t n, unsigned width);
        Takes in signed integer and returns T/F indicating whether it will
        fit in the given width.
    - uint64_t Bitpack_getu(uint64_t word, unsigned width, unsigned lsb);
        Returns and unsigned integer located in the specified word beginning
        at the lsb and of specified width.
    - int64_t Bitpack_gets(uint64_t word, unsigned width, unsigned lsb);
        Returns and signed integer located in the specified word beginning
        at the lsb and of specified width.
    - uint64_t Bitpack_newu(uint64_t word, unsigned width, unsigned lsb, 
        uint64_t value);
        Sets the value of the unsigned integer at the location specified and
        returns the value.
    - uint64_t Bitpack_news(uint64_t word, unsigned width, unsigned lsb,  
        int64_t value);
        Sets the value of the signed integer at the location specified and
        returns the value.
    - Except_T Bitpack_Overflow;
        Exception that is thrown when the bits you are attempting to pack into
        a specified word do not fit.

INVARIANTS  
    - Data Structures:
        At each stage of this process, we are representing the image as a
        pixmap with varying information storage formats for a given pixel. At
        any point, each element in the array represents one of two things:
            - how to represent a single pixel
            - how to represent a block of 4 pixels
        At any time, the UArray2 element can be compressed through a series of
        transformations to represent a portion of a 32-bit word, which can 
        then be decompressed to a struct of scaled integers.
        Within the 32-bit word the following must hold true for each pixel:
            - the most significant cosine coefficient (a) will be 9 bits
            - the cosine coefficients (b,c,d) will be 5 bits
            - the chroma values will be represented as 4 bit indeces
            - all bits are in big-endian order
    - Program:
        At any point in the compression process, there is a corresponding
        decompression process that will return the pixmap to its original
        form. Although some information is lost, the amount is negligible.

TESTING COMPONENTS
    Each compression function has a corresponding decompression function.  By
    compressing and decompressing the image at each step of the conversion
    processing and then examining the differences between them, we can observe
    both the validity of our implementations and the transformations that
    result in information loss. By testing each step in the compression
    process against the decompression process, we can be sure that the higher
    levels work before moving further into compression.

CHALLENGE CHANGES
    Our design relies heavily on apply functions that are applicable to
    various UArray2 implementations (polymorphism!) and each apply function
    only does one things. Because we have clearly specified what each function
    does and broken them down into the smallest problems possible, we hope to
    eliminate large scale changes in our code.

INFORMATION LOSS
    The three major areas where information will be lost in compression is the
    "evening" out of the dimensions, the transition from RGB float values to 
    Luminance and blue / red chroma, and in the transformation of cosine 
    coefficients to five-bit signed values.  The second process uses imprecise
    matrix multiplication and floating point calcluations, which could result 
    in rounding errors and information loss (not visible to the eye). The last 
    process assumes that the the cosine coefficients fall between -0.3 and 
    +0.3, eliminating information in the case of highly saturated images (fall
    between -0.5 to +0.5). 
    In terms of decompression, the most significant issue will arise in the
    red and blue chroma values for each pixel.  Because these are averaged for
    each block in the compression process, each pixel will be assigned the avg
    in decompression, losing the chroma differences between each pixel in a
    block.
